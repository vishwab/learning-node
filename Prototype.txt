Prototype
=========

In a true sense, there is no such thing as a class in JavaScript, the way
it is in Java


MOST CLASSES INNSIDE CORE NODE.JS ARE WRITTEN USING THIS PATTERN.


Some Links:
https://www.phpied.com/3-ways-to-define-a-javascript-class/


Every object in JS has an internal link to another object called the "prototype".

Prototypes are shared between all the objects (let's call these instances) created 
from the same function.

Imagine you need 1,000 instances created. All the functionality you put on prototype is shared. 

Lesson 1
--------
prototype saves memory

Prototype is great for reading data off an object. However, if you set a property on the
object, you break the link with the prototype because the prototype is only accessed
if the property does not exist on the object. 

Example:
// Lets create a test function and set a member on its prototype.
function foo() { };
foo.prototype.bar = 123;

// Lets create 2 instances
var bas = new foo();
var qux = new foo();

// Overwrite the prototype value for bas
bas.bar = 456;
console.log(bas.bar); //456 i.e., prototype not accessed

// Other objects remain unaffected
console.log (qux.bar); // 123


Lesson 2
--------
.prototype is not good for properties you plan on writing to.


So the question becomes what we should use for properties we need to write to.
Recall that "this" refers to the object that is created when the function is called with
the new operator. So "this" is a perfect candidate for read/write properties and you should use it for all properties. But functions are generally not altered after creation. So functions are great candidates to go on .prototype This way, functionality (functions/methods) is shared between all instances and properties belong on individual objects.

// Class definition
function someClass() {
	// Properties go here
	this.someProperty = 'some intial value';
}

// Member functions go here:
someClass.prototype.someMemberFunction = function() {
	/* Do something using this */
	this.someProperty = 'modified value';
}

// Creation
var instance = new someClass();

// Usage
console.log(instance.someProperty); // some initial value
instance.someMemberFunction();
console.log(instance.someProperty); // modified value

The main difference here vs the Revealing Module Pattern is that functions are shared
between all the instances and don't take up memory for each instance. This is because
functions are only on .prototype and not on "this". 



