Prototype
=========
Every object in JS has an internal link to another object called the "prototype".

Prototypes are shared between all the objects (let's call these instances) created 
from the same function.

Imagine you need 1,000 instances created. All the functionality you put on prototype is shared. And therefore lesson one: prototype saves memory

Prototype is great for reading data off an object. However, if you set a property on the
object, you break the link with the prototype because the prototype is only accessed
if the property does not exist on the object. 

Example:
// Lets create a test function and set a member on its prototype.
function foo() { };
foo.prototype.bar = 123;

// Lets create 2 instances
var bas = new foo();
var qux = new foo();

// Overwrite the prototype value for bas
bas.bar = 456;
console.log(bas.bar); //456 i.e., prototype not accessed

// Other objects remain unaffected
console.log (qux.bar); // 123





